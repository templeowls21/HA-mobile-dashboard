type: custom:button-card
tap_action:
  action: navigate
  navigation_path: "#person-name"
styles:
  card:
    - padding: 0px
    - height: 55px
    - border-radius: 10px
    - justify-content: center
    - align-items: center
  grid:
    - display: grid
    - grid-template-columns: auto 1fr auto
    - grid-template-rows: auto auto auto
    - grid-template-areas: |
        "picture entity travel"
        "picture state travel"
  custom_fields:
    picture:
      - grid-area: picture
      - justify-self: start
      - align-self: center
      - margin-left: 6px
      - margin-top: 2px
    entity:
      - grid-area: entity
      - justify-self: start
      - align-self: end
      - text-align: left
      - margin-left: 15px
      - margin-top: 2px
    state:
      - grid-area: state
      - justify-self: start
      - align-self: start
      - text-align: left
      - margin-left: 15px
    travel:
      - grid-area: travel
      - justify-self: center
      - align-self: center
      - text-align: left
      - margin-left: "-50px"
      - margin-top: 5px
custom_fields:
  picture: |
    [[[
      let state = states['person_entity'].state;
      let borderColor = "gray";
      if (state === "home") {
        borderColor = "green";
      } else if (state === "AMC") {
        borderColor = "red";
      } else if (state === "GFH") {
        borderColor = "red";
      } else {
        borderColor = "orange";
      }

      return `<div style="position: relative; margin: 0; padding: 0; border: 3px solid ${borderColor}; border-radius: 50%; width: 40px; height: 40px; display: flex; justify-content: center; align-items: center;">
                <img src="${states['person_entity'].attributes.entity_picture}" style="width: 40px; height: 40px; border-radius: 50%; object-fit: cover; margin: 0; padding: 0;">
              </div>`;
    ]]]
  entity: |
    [[[
      return `<div style="font-size: 14px; font-weight: bold; margin: 0; padding: 0;">
                ${states['person_entity'].attributes.friendly_name}
              </div>`;
    ]]]
  state: |
    [[[
      let state = states['person_entity'].state;
      if (state === "home") {
        state = "Home";
      } else if (state === "not_home") {
        state = "Away";
      }
      return `<div style="font-size: 11px; color: var(--secondary-text-color); margin: 0; padding: 0;">
                ${state}
              </div>`;
    ]]]
  travel: |
    [[[
      let travel_time = states['sensor.travel_time_home'].state;
      let color = "green";
      let max_time = 60;
      let percentage = Math.min((travel_time / max_time) * 100, 100);
      if (travel_time >= 40) {
        color = "red";
      } else if (travel_time >= 20) {
        color = "yellow";
      } else {
        color = "green";
      }

      return `<div style="font-size: 14px; color: var(--secondary-text-color); margin: 0; padding: 0;">
                <svg width="35" height="35" viewBox="0 0 36 36" class="circular-chart">
                  <path class="circle-bg"
                    stroke="#eee"
                    stroke-width="2"
                    fill="none"
                    d="M18 2.0845
                      a 15.9155 15.9155 0 0 1 0 31.831
                      a 15.9155 15.9155 0 0 1 0 -31.831" />
                  <path class="circle"
                    stroke="${color}"
                    stroke-width="2"
                    stroke-dasharray="${percentage}, 100"
                    fill="none"
                    d="M18 2.0845
                      a 15.9155 15.9155 0 0 1 0 31.831
                      a 15.9155 15.9155 0 0 1 0 -31.831" />
                  <text x="18" y="17" class="percentage" style="fill:#fff; font-size: 10px; text-anchor: middle;">${travel_time}</text>
                  <text x="18" y="25" class="percentage" style="fill:#fff; font-size: 6px; text-anchor: middle;">min</text>
                </svg>
              </div>`;
    ]]]
